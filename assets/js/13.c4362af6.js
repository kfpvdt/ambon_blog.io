(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{433:function(e,n,a){e.exports=a.p+"assets/img/1.0dae1363.png"},434:function(e,n,a){e.exports=a.p+"assets/img/2.e7e56fbd.png"},435:function(e,n,a){e.exports=a.p+"assets/img/3.0d1c7ec5.png"},467:function(e,n,a){"use strict";a.r(n);var t=a(0),o=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("开发日志")]),e._v(" "),n("p",[e._v("现在我的gpt是放在腾讯云中的，因为现在要进行迭代的不多，本来是想开发个登录页面的，但是一到周末就懒得动，还有其他一些乱七八糟的事，想来最近应该打算更新（最多下个月搞个GPT4），不过因为要绕过CF的原因，目前版本用的是token，而没有用API，所以每隔14天要换一下。token14天失效。")])]),e._v(" "),n("p",[e._v("先更新了token,然后打包重新上线锁进程即可。"),n("br"),e._v(" "),n("img",{attrs:{src:a(433),alt:"1"}}),e._v("\n这是目前的目录结构\n"),n("img",{attrs:{src:a(434),alt:"2"}}),n("br"),e._v("\n重新上传运行后报错，")]),e._v(" "),n("div",{staticClass:"language-[root@VM-4-6-centos service]# pnpm prod extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n> chatgpt-web-service@1.0.0 prod /home/lighthouse/myblog/service\n> node ./build/index.mjs\n\nnode:events:504\n      throw er; // Unhandled 'error' event\n      ^\n\nError: listen EADDRINUSE: address already in use :::3002\n    at Server.setupListenHandle [as _listen2] (node:net:1330:16)\n    at listenInCluster (node:net:1378:12)\n    at Server.listen (node:net:1465:7)\n    at Function.listen (/home/lighthouse/myblog/service/node_modules/.pnpm/express@4.18.2/node_modules/express/lib/application.js:635:24)\n    at file:///home/lighthouse/myblog/service/build/index.mjs:287:5\n    at ModuleJob.run (node:internal/modules/esm/module_job:197:25)\n    at async Promise.all (index 0)\n    at async ESMLoader.import (node:internal/modules/esm/loader:337:24)\n    at async loadESM (node:internal/process/esm_loader:88:5)\n    at async handleMainPromise (node:internal/modules/run_main:61:12)\nEmitted 'error' event on Server instance at:\n    at emitErrorNT (node:net:1357:8)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21) {\n  code: 'EADDRINUSE',\n  errno: -98,\n  syscall: 'listen',\n  address: '::',\n  port: 3002\n}\n ELIFECYCLE  Command failed with exit code 1.\n")])])]),n("p",[e._v("看都不用看，之前端口没关，关掉端口，重新跑下，然后锁住进程就可以了。\n"),n("code",[e._v("lsof -i :3002")]),n("br"),e._v("\n果然")]),e._v(" "),n("div",{staticClass:"language-COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("node    16088 root   19u  IPv6 41676461      0t0  TCP *:exlm-agent (LISTEN)\nnode    16088 root   20u  IPv6 55864517      0t0  TCP VM-4-6-centos:exlm-agent->recyber.net:64325 (ESTABLISHED)\n[root@VM-4-6-centos service]#\n")])])]),n("p",[e._v("kill掉这个端口，kill 16088,再运行还是报错？再看下，怎么还有个  再kill，\n一直kill不掉，用sudo试试，我估计是因为我之前安装了pm2的原因，还是不行，那就先删除我的pm2进程\n看下我的pm2进程，果然是这样")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@VM-4-6-centos service]# pm2 list\n┌────┬────────────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐\n│ id │ name                   │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │\n├────┼────────────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤\n│ 0  │ chatgpt-web-service    │ default     │ N/A     │ fork    │ 32457    │ 17m    │ 19   │ online    │ 0%       │ 71.6mb   │ root     │ disabled │\n└────┴────────────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘\n")])])]),n("p",[e._v("把他Kill了再説")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@VM-4-6-centos service]# pm2 delete chatgpt-web-service\n[PM2] Applying action deleteProcessId on app [chatgpt-web-service](ids: [ 0 ])\n[PM2] [chatgpt-web-service](0) ✓\n┌────┬───────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐\n│ id │ name      │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │\n└────┴───────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘\n")])])]),n("p",[e._v("果然，再看下端口"),n("code",[e._v("sudo lsof -i :3002")]),e._v("就没了\n重新跑下应该就OK了。\n因为我的后台现在在3002端口，所以先查看下端口信息"),n("code",[e._v("sudo lsof -i :3002")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("COMMAND  PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME\nnode    8007 root   21u  IPv6 66230864      0t0  TCP *:exlm-agent (LISTEN)\n[root@VM-4-6-centos ~]# \n")])])]),n("p",[e._v("正在使用端口3002的进程的命令名称是 node。可以使用以下命令将其添加到 PM2 中：\n"),n("code",[e._v("pm2 start node --name chatgpt-web-service -- ./build/index.mjs")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@VM-4-6-centos ~]# pm2 start node --name chatgpt-web-service -- ./build/index.mjs\n[PM2] Starting /usr/local/lighthouse/softwares/nodejs/node/bin/node in fork_mode (1 instance)\n[PM2] Done.\n┌────┬────────────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐\n│ id │ name                   │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │\n├────┼────────────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤\n│ 0  │ chatgpt-web-service    │ default     │ N/A     │ fork    │ 21649    │ 0s     │ 0    │ online    │ 0%       │ 5.9mb    │ root     │ disabled │\n└────┴────────────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘\n[root@VM-4-6-centos ~]# \n")])])]),n("p",[e._v('这将启动 node ./build/index.mjs 命令并将其添加到 PM2 中，指定应用程序名称为 "chatgpt-web-service"。可以使用 pm2 list 命令来查看已启动的进程列表。')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@VM-4-6-centos ~]# pm2 list\n┌────┬────────────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐\n│ id │ name                   │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │\n├────┼────────────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤\n│ 0  │ chatgpt-web-service    │ default     │ N/A     │ fork    │ 0        │ 0      │ 15   │ errored   │ 0%       │ 0b       │ root     │ disabled │\n└────┴────────────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘\n[root@VM-4-6-centos ~]# \n")])])]),n("p",[e._v("没问题了,ok。")]),e._v(" "),n("h2",{attrs:{id:"关于用pm2锁住后台进程。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于用pm2锁住后台进程。"}},[e._v("#")]),e._v(" 关于用pm2锁住后台进程。")]),e._v(" "),n("p",[e._v("首先，eg：我在后台启动了进程，查看返回结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@VM-4-6-centos service]# pnpm prod\n\n> chatgpt-web-service@1.0.0 prod /home/lighthouse/myblog/service\n> node ./build/index.mjs\n\nServer is running on port 3002\n\n")])])]),n("p",[e._v("那么可以看出运行的位置为/home/lighthouse/myblog/service")]),e._v(" "),n("blockquote",[n("p",[e._v("node ./build/index.mjs,\n想使用PM2锁定该进程，可以按照以下步骤进行操作：")])]),e._v(" "),n("p",[e._v("在终端中运行以下命令，启动PM2并将应用程序添加到进程列表中：\n"),n("code",[e._v("pm2 start --name chatgpt-web-service --interpreter=node /home/lighthouse/myblog/service/build/index.mjs")]),e._v("\n同时也可以用"),n("code",[e._v("pm2 delete 0")]),e._v("删除掉进程，0指的是id号")]),e._v(" "),n("p",[e._v("问了下gpt，还是有问题，改下吧")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("不知道为什么我一退出服务器就500了，应该是他进程自己就退了 没锁成功\n如果您在退出服务器后进程自动终止，并且您希望进程能够在后台继续运行，您可以使用以下方法：\n\n使用 nohup 命令：在启动进程时，在命令前加上 nohup，例如：\n\nbash\nCopy code\nnohup pm2 start app.js &\n这样会将进程放到后台运行，并且不会受到终端会话的影响。\n\n使用 tmux 或 screen：这些工具可以创建会话并在会话中运行进程。这样，即使您退出服务器，会话仍然会保持活动状态，进程也会继续运行。您可以通过以下步骤使用 tmux：\n\n安装 tmux（如果尚未安装）：\n\nbash\nCopy code\nsudo yum install tmux\n启动一个新的 tmux 会话：\n\nbash\nCopy code\ntmux new -s mysession\n在 tmux 会话中启动进程：\n\nbash\nCopy code\npm2 start app.js\n按下 Ctrl + B，然后按下 D，从会话中分离。\n\n当您再次登录服务器时，可以使用以下命令重新附加到 tmux 会话：\n\nbash\nCopy code\ntmux attach -t mysession\n这样，您的进程将在后台运行，并且不会受到您退出服务器的影响。\n")])])]),n("p",[e._v("再来最后一次，大概率是因为没有用nohup的原因")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@VM-4-6-centos ~]# pm2 list\n┌────┬────────────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐\n│ id │ name                   │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │\n├────┼────────────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤\n│ 1  │ chatgpt-web-service    │ default     │ 1.0.0   │ fork    │ 27003    │ 12m    │ 0    │ online    │ 0%       │ 65.2mb   │ root     │ disabled │\n└────┴────────────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘\n[root@VM-4-6-centos ~]# nohup pm2 start /home/lighthouse/myblog/service/build/index.mjs --name chatgpt-web-service &\n[1] 23777\n[root@VM-4-6-centos ~]# nohup: ignoring input and appending output to ‘nohup.out’\n\n")])])]),n("p",[e._v("还是不成，命令错了"),n("br"),e._v("\n正确的命令应该是 pm2 start <脚本路径> --name <应用名称> -- <参数>。")]),e._v(" "),n("blockquote",[n("p",[e._v("sudo systemctl list-units --type=service\n这傻逼GPT只会把人往沟里带，还好我想起来了。\n"),n("img",{attrs:{src:a(435),alt:"3"}}),e._v("\n果然还是要多看日志"),n("code",[e._v("pm2 logs chatgpt-web-service")]),e._v("查看进程的日志输出")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@VM-4-6-centos service]# pm2 logs chatgpt-web-service\n[TAILING] Tailing last 15 lines for [chatgpt-web-service] process (change the value with --lines option)\n/root/.pm2/logs/chatgpt-web-service-out.log last 15 lines:\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n0|chatgpt- |  ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND  No package.json (or package.yaml, or package.json5) was found in "/root".\n\n/root/.pm2/logs/chatgpt-web-service-error.log last 15 lines:\n0|chatgpt- |   address: \'::\',\n0|chatgpt- |   port: 3002\n0|chatgpt- | }\n0|chatgpt- | Error: Missing OPENAI_API_KEY or OPENAI_ACCESS_TOKEN environment variable\n0|chatgpt- |     at file:///home/lighthouse/myblog/service/src/chatgpt/index.ts:33:9\n0|chatgpt- |     at ModuleJob.run (node:internal/modules/esm/module_job:197:25)\n0|chatgpt- |     at async Promise.all (index 0)\n0|chatgpt- |     at ESMLoader.import (node:internal/modules/esm/loader:337:24)\n0|chatgpt- |     at importModuleDynamicallyWrapper (node:internal/vm/module:437:15)\n0|chatgpt- | Error: Missing OPENAI_API_KEY or OPENAI_ACCESS_TOKEN environment variable\n0|chatgpt- |     at file:///home/lighthouse/myblog/service/src/chatgpt/index.ts:33:9\n0|chatgpt- |     at ModuleJob.run (node:internal/modules/esm/module_job:197:25)\n0|chatgpt- |     at async Promise.all (index 0)\n0|chatgpt- |     at ESMLoader.import (node:internal/modules/esm/loader:337:24)\n0|chatgpt- |     at importModuleDynamicallyWrapper (node:internal/vm/module:437:15)\n\n')])])]),n("p",[e._v("根据日志信息，存在两个主要问题：")]),e._v(" "),n("p",[e._v("缺少 package.json 文件：日志中显示了多个 ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND 错误，指示在 /root 目录下找不到 package.json 文件。确保在运行应用程序之前在正确的目录下提供了有效的 package.json 文件。")]),e._v(" "),n("p",[e._v("之前是因为我先打包后运行的，但是打包后丢失Package.json,要么改结构，要么像我之前一样直接在服务器跑"),n("code",[e._v("pnpm start")]),e._v("就可以，然后锁进程"),n("code",[e._v('pm2 start pnpm --name "chatgpt-web-service" -- start')])])])}),[],!1,null,null,null);n.default=o.exports}}]);