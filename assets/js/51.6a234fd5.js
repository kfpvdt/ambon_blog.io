(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{487:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("python")]),t._v(" "),a("p",[t._v("python是一种解释型，面向对象，动态数据类型的高级程序设计语言，像Perl语言一样，Python源代码同样遵循GPL协议。Python优雅的语法和动态类型，在结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。\n")])]),t._v(" "),a("h2",{attrs:{id:"python简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python简介"}},[t._v("#")]),t._v(" Python简介：")]),t._v(" "),a("p",[t._v("python是一种解释型，面向对象，动态数据类型的高级程序设计语言，像Perl语言一样，Python源代码同样遵循GPL协议。Python优雅的语法和动态类型，在结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。")]),t._v(" "),a("h2",{attrs:{id:"python的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python的语法"}},[t._v("#")]),t._v(" python的语法")]),t._v(" "),a("p",[t._v("python是一种弱类型语言，弱类型语言的有两个特点：1）变量不用声明就可以i直接赋值，对于一个不存在的变量赋值就相当于定义了一个新变量。2）变量的数据类型可以随时改变，比如，他弄一个变量可以一会被赋值为正数，一会被赋值为字符串。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/4513dafcd80c4ea18e82c51e64854b71.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"执行语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行语法"}},[t._v("#")]),t._v(" "),a("a",{attrs:{name:"_6"}},[t._v(";")]),t._v(" 执行语法")]),t._v(" "),a("p",[t._v("Python是可以直接在命令行中编写执行Python的语法。\n我们直接打印一个hello word，显示的结果可以直接出来。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/e4edb2d4b2d14aecafce6c5d61dff6ac.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),a("p",[t._v("变量可以看成一个小箱子，专门用来装程序中的数据，每个变量都拥有独一无二的名通过变量的名字就可以找到变量的数据。\n常量也可以看做是一个装数据的小箱子，但是与变量不同的是： "),a("strong",[t._v("变量保存的数据可以被多次修改，但是常量一但被保存，某个数据之后就不能修改了")])]),t._v(" "),a("h4",{attrs:{id:"变量的赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的赋值"}},[t._v("#")]),t._v(" 变量的赋值")]),t._v(" "),a("p",[t._v('变量就是通过"="来进行赋值，即')]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nreal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/6626dc76ac514b0eb886b3c89e411f1b.png",alt:""}}),t._v("\n除了赋值单个数量。还可以将表达式的运算结果赋值给变量")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nrem\n")])])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/529c7aa88b984a00858db9b05c866e7d.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"python的序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python的序列"}},[t._v("#")]),t._v(" python的序列")]),t._v(" "),a("p",[t._v("python序列是指按照一定的顺序一次排列的一组数据，他们可以占用一块连续的内存。也可以分散 到多块内存中。\nPython中的序列类型包括 "),a("strong",[t._v("列表（List）、元组（tuple）、字典（dict）")])]),t._v(" "),a("h5",{attrs:{id:"列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[t._v("#")]),t._v(" 列表")]),t._v(" "),a("p",[t._v("类似于数组，就是将一组数存储起来，方便后面的代码使用。但是在Python中是没有数组的，但是列表的功能比数组的功能更加强大。\n1.创建列表")]),t._v(" "),a("ul",[a("li",[t._v("使用[ ]直接创建列表，格式如下：")])]),t._v(" "),a("blockquote",[a("p",[t._v("listname = [ element1,emelent2,......,elementn]")])]),t._v(" "),a("p",[t._v("这种创建方式的时候，列表中的元素可以有值，也可以为空，相当于一个空列表。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2e11fd5b216340408820a2c559e375a4.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("使用list()函数创建列表：\nlist()是Python中的一个内置函数，他可以将其他数据类型转换成为列表类型。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/6546f5d185034ddab41bd6765638f030.png",alt:""}}),t._v("2.访问列表\n在访问列表的时候，可以使用两种方式来访问")])]),t._v(" "),a("blockquote",[a("p",[t._v("listname[i]—使用索引的方式进行访问，i表示的是索引值。\nlistname[start : end : step]—使用切片的方式来访问，start表示开始的位置，end表示结束位置，step表示长度。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/48bdb57fb22d410e8bed9b6a29924319.png",alt:""}}),t._v("\n通过这个例子我们也可以发现，list所开始的第一位数字是0开始记位\n3.删除列表\n删除列表所用到的命令是：del")]),t._v(" "),a("blockquote",[a("p",[t._v("del listname")])]),t._v(" "),a("h5",{attrs:{id:"元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[t._v("#")]),t._v(" "),a("a",{attrs:{name:"_52"}},[t._v(";")]),t._v(" 元组")]),t._v(" "),a("p",[t._v("元组是Python中一个重要的序列结构，和列表类似，元组也是由一系列按特定顺序排列的元素组成。\n元组和列表（list）的不同之处在于：")]),t._v(" "),a("ul",[a("li",[t._v("列表的元素是可以更改的，包括修改元素值，删除和插入元素，所以列表是可变序列；")]),t._v(" "),a("li",[t._v("而元组一旦被创建，它的元素就不可更改了，所以元组是不可变序列。\n1.创建元组")]),t._v(" "),a("li",[t._v('使用（）直接创建，和list相似，使用"="来进行赋值给变量。')])]),t._v(" "),a("blockquote",[a("p",[t._v("tuplename = (element1, element2, ..., elementn)")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2887e9e5411d4f0fb9a048d813b7979b.png",alt:""}}),t._v("\n我没在列子中也可以看到，即便没有写小括号将元素包起来，他也是能识别的；所以小括号不是必须的，只要将各个元素隔离开就可以，但是为了格式的规范，还是建议写上的。")]),t._v(" "),a("ul",[a("li",[t._v("使用tuple()函数来创建元组，他和list()一样，可以将其他数据类型转为元组类型。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/4918df27199f46c4b4c13cac063446a7.png",alt:""}}),t._v("\n2.查询元组（这里和list差不多，就直接上例子了）\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/11b2c0dcf41d408dbff926b84c8e3efd.png",alt:""}})])]),t._v(" "),a("h5",{attrs:{id:"字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字典"}},[t._v("#")]),t._v(" 字典")]),t._v(" "),a("p",[t._v("字典是一种无序的、可变的序列，他的元素是以键值对的形式存储，而列表和元组都是有序的序列，他们的元素在底层都是挨着存储的。\n1.字典的特征")]),t._v(" "),a("ul",[a("li",[t._v("通过键而不是通过索引来读取元素")]),t._v(" "),a("li",[t._v("字典是任意数据类型的无序集合")]),t._v(" "),a("li",[t._v("字典是可变的，并且可以任意嵌套")]),t._v(" "),a("li",[t._v("字典中的键必须唯一")]),t._v(" "),a("li",[t._v("字典中的键必须不可变")])]),t._v(" "),a("p",[t._v("2.创建字典")]),t._v(" "),a("ul",[a("li",[t._v("使用{ }创建字典")])]),t._v(" "),a("blockquote",[a("p",[t._v("dictname = {'key':'value1', 'key2':'value2', ..., 'keyn':valuen}\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/d5d4be4c78564a6db5b1f80a32564168.png",alt:""}})])]),t._v(" "),a("ul",[a("li",[t._v("使用fromkeys()方式创建字典：")])]),t._v(" "),a("blockquote",[a("p",[t._v("dictname = dict.fromkeys(list，value=None)—list表示字典中所有键的列表，value表示默认值，如果不写就是为空值")])]),t._v(" "),a("p",[t._v("3.访问字典，命令格式为：")]),t._v(" "),a("blockquote",[a("p",[t._v("dictname[key]----方括号中的键是必须存在的，如果不存在会报错")])]),t._v(" "),a("h3",{attrs:{id:"python流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python流程控制"}},[t._v("#")]),t._v(" "),a("a",{attrs:{name:"python_86"}},[t._v(";")]),t._v("  Python流程控制")]),t._v(" "),a("h4",{attrs:{id:"判断语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断语句"}},[t._v("#")]),t._v(" 判断语句")]),t._v(" "),a("p",[t._v("Python条件和if语句\n"),a("strong",[t._v("1.Python支持来自数学的常用逻辑条件：")])]),t._v(" "),a("ul",[a("li",[t._v("等于：a==b")]),t._v(" "),a("li",[t._v("不等于：a!=b")]),t._v(" "),a("li",[t._v("小于：a")])]),t._v(" "),a("p",[a("strong",[t._v("2)if语句")]),t._v("\nif...else()语句：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("b\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("输出的结果为A。")]),t._v(" "),a("h4",{attrs:{id:"循环语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[t._v("#")]),t._v(" 循环语句")]),t._v(" "),a("p",[a("strong",[t._v("1.for循环")]),t._v("\nfor循环用于迭代序列（前面说过的列表，元组，字典等）；Python的for循环关键字与其他语言不太一样，就直接看图吧\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/0023e06e60db444eb5049fa7e9b2c103.png",alt:""}}),t._v("\nfor循环中可以用到range()函数，即如果需要循环的一组代码指定次数；range()函数返回一个数字序列，默认情况下从0开始，并且默认的每次递增一个，并以指定的数字结束。\n"),a("strong",[t._v("2.while循环")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/05221da572d34fe3a70f27727099f236.png",alt:""}}),t._v("\nwhile语句中会使用break语句和continue语句。如果循环中有break语句，即便while条件为真，循环也会停止并且跳出循环；但是有continue语句的时候，表示可以停止当前的迭代，并且继续下一个迭代。")]),t._v(" "),a("h3",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),a("p",[t._v("面向对象编程是一种封装代码的方法；代码封装就是隐藏实现功能的具体代码，仅留给用户使用的接口。\nPython中也支持面向对象的三大特征：封装、继承、多态。")]),t._v(" "),a("h4",{attrs:{id:"面向对象的相关术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的相关术语"}},[t._v("#")]),t._v(" 面向对象的相关术语")]),t._v(" "),a("ul",[a("li",[t._v("类：可以理解是一个模板，通过它来创建出无数个具体的实例；类是抽象一类事物的总称，")]),t._v(" "),a("li",[t._v("对象：类时不可以直接使用的，需要通过类创建的实例才能使用，这个实例也就是对象。")]),t._v(" "),a("li",[t._v("属性：类中的所有变量称为属性")]),t._v(" "),a("li",[t._v("方法：类中的所有函数通常叫做方法")])]),t._v(" "),a("p",[t._v("这里的重点就是 "),a("strong",[t._v("类和对象")]),t._v('。\n类的命名规则首字母最好大写，可以采用驼峰写法，例如：StudentName\npython中的类也是通过用class来定义，并且他也可以下成"class student(object)"的方式来定义，括号内的是class所继承的父类，如果不知道又想写的话写object就行。')]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello Python"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello word'")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    lei "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("运行的结果就是\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/3c4ffe45d80b450fbcc9872fc88572f1.png",alt:""}}),t._v("\n__ init __ ()是Python中的内置函数；当创建此类的新势力的视乎，这个方法可以叫做初始化方法。")]),t._v(" "),a("h5",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),a("p",[a("strong",[t._v("构造函数")]),t._v("就是赋予参数属性，在类实例化的时候，会把属性附在实例化上面；构造函数可以显示掉用，但是这样的话会变成为普通函数，所以不要这样操作。\n构造函数是以双下划线开头的类函数。创建对象的时候，在需要的情况下，构造函数可以接受参数。若火创建没有构造函数的类的时候，Python会自动创建一个不执行的任何操作的默认构造函数\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/75d265776f9d41199fd2fd32273917fd.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("类变量与实例变量")]),t._v("：类变量总和类关联在一起的，实例变量总是和对象关联在一起的；所以我们在类实例化的时候传递进来不同对象的特征值，那么我们就需要保存不同对象的特征值，这个时候就需要用到 "),a("strong",[t._v("self")]),t._v("保存。\n"),a("strong",[t._v("self")]),t._v("：保存对象属性的，若果不保存的话对象是没有属性值得，并且self和对象有关和类没有关系。要注意的是，在想要通过实例化传递值得时候，是需要保存的，如果没有保存，就只能往上走了，去查找上面的值，所以在写构造函数的时候，一定要吧self写上。")]),t._v(" "),a("h6",{attrs:{id:"类方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类方法"}},[t._v("#")]),t._v(" "),a("a",{attrs:{name:"_162"}},[t._v(";")]),t._v(" 类方法")]),t._v(" "),a("p",[t._v("__ new "),a("strong",[t._v("()方法：是一种负责创建类实例的静态方法，他不需要使用staticmethod装饰器修饰，并且它优点于")]),t._v(" init __ ()初始化方法被调用。\n__ repr __()方法：显示属性\n__ del __()方法：销毁对象\n__ dir __()用法：列出地所有属性名\n__ dict __()属性：查看对象内部所有属性名和属性值组成的字典")]),t._v(" "),a("h4",{attrs:{id:"公开和私有"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公开和私有"}},[t._v("#")]),t._v(" 公开和私有")]),t._v(" "),a("p",[a("strong",[t._v("protected：保护，可以被子类进行调用"),a("br"),t._v("private：私有方法，只可以被自己调用，子类也不行。"),a("br"),t._v("public：公有的")]),t._v("\nPython中通过两个下划线认为是私有属性，可以使用__dict __()看见。如果想要修改私有属性，就需要使用个modify_price来进行修改。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/0b3b267fe708421e90ccbadf559b0021.png",alt:""}})]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" c9_1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Array6\narr6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__dict__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__dict__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("输出结果是：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/3191fec229e74ee6b5946c9a256f84d4.png",alt:""}}),t._v("\n输出结果里面确实有__price属性，只是在编译的时候编辑器给它加上了一个横杠和类名。")]),t._v(" "),a("blockquote",[a("p",[t._v("这里就产生了一个疑问，明明定义的是私有变量，为什们外部依旧可以访问？\n这是因为你访问的就不是私有变量，他只是新创建了一个变量，并且访问的是新生成的这个变量。")])]),t._v(" "),a("blockquote",[a("p",[t._v("python的c3算法\npython的c3算法就是多重继承。\nmro（方法解释顺序），就是判断在多继承的时候来自哪个类。在判断mro之前需要先确定线性序列，然后在查找路径是由序列中哪个类的顺序决定，所以c3算法是先生成一个线性序列在尽行判断")])]),t._v(" "),a("h4",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("p",[t._v("Python的闭包：定义函数与外部环境变量为闭包，也就是说闭包=函数+环境变量（函数在定义的时候）；闭包并不是必不可少的，他只是编程的一种，属于函数式的编程。\n闭包是由函数和自由变量的引用组成。举个例子：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ta"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" demo2\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("demo1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__closure__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这个的运行过程就是d=demo1()的结果就相当于d=demo2，也就是等于demo2的函数名；所以子执行的时候需要在家个()也就是print(d(2))这样。\n但是需要注意的是，return返回的函数不要引用任何循环变量，否则会报错。\n如果闭包的时候要改变外部的局部环境时候，加上一句nobocal就会认为是非环境变量了。")]),t._v(" "),a("h4",{attrs:{id:"列表生成式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表生成式"}},[t._v("#")]),t._v(" 列表生成式")]),t._v(" "),a("p",[t._v("可以理解为用一种优雅的语言来写for循环。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("aa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("结果是：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/75db675021ed452c87be86b08a6a34d0.png",alt:""}})]),t._v(" "),a("h6",{attrs:{id:"列表常用的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表常用的方法"}},[t._v("#")]),t._v(" 列表常用的方法")]),t._v(" "),a("ol",[a("li",[t._v("append()方法：用于在列表末尾添加型的对象—语法：list.appandd()")]),t._v(" "),a("li",[t._v("count()方法：用于统计某个元素在列表中出现的次数—语法：list.count()")]),t._v(" "),a("li",[t._v("extend()方法：用于在列表末尾异性追加另一个序列中的多个值—语法:list.extend(seq)")]),t._v(" "),a("li",[t._v("index()方法：用于从列表中找出某个值第一个匹配项的索引位置—语法：list.index(x[, start[, end]])-----x:查找的对象；start：开始位置，end：结束位置")]),t._v(" "),a("li",[t._v("pop()方法：用于移除列表中的一个元素，默认为列表中的最后一个元素，并且返回该元素的值—语法：list.pop([index=-1])")]),t._v(" "),a("li",[t._v("remove()方法：用于移除李彪中某个值的第一个匹配项----语法：list.remove(obj)")]),t._v(" "),a("li",[t._v("reverse()方法：将元素倒序排列")])]),t._v(" "),a("h4",{attrs:{id:"生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[t._v("#")]),t._v(" 生成器")]),t._v(" "),a("p",[t._v("生成器（generator），也就是将列表的[ ]变成( )，就创建了一个generator。生成器保存的是算法，每一次调用next(g)，就可以计算出g的下一个元素的值，直到计算到最后一个元素的时候，会抛出StopInteration的错误，所以为了优化，我们可以用for循环来进行调用，for循环可以将异常捕获，解决StopInteration错误的问题。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("ll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("结果是：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/21c64592989d47b698ef43a5489ee1f3.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("与列表生成式的区别：\n用的话推荐用生成器，因为他是惰性匹配，如果有很多数据的时候，列表生成式会将所有的数据都存储进来，而生成器采用的是惰性匹配，他会循环一次算一次，极大的节省了空间")])]),t._v(" "),a("p",[t._v("yield命令：可以将正常数列变成生成器，他可以从中断的位置继续运行。")]),t._v(" "),a("blockquote",[a("p",[t._v("generator函数和普通函数的执行流程不同，普通函数遇到return语句或者最后一行函数语句就直接返回，但是generator函数再用next()调用执行的时候，遇到yield语句也会返回，但是再次执行的时候会从上此次返回的yield语句处执行。")])]),t._v(" "),a("h4",{attrs:{id:"迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),a("p",[t._v("迭代器：iterator；可以被next调用并不断返回下一个值的对象称为迭代器；生成器就是一种迭代器，\n可迭代对象（iterable）：可以被for循环的数据，都被叫做可迭代对象----字符串、元组、列表、字典、set（在定义中最好放一个数组；set最主要的功能是可以去重）\n优先级genarator>iter>iterable\n利用iter()函数可以将可迭代对象变成迭代器。同时想要将变量变成迭代器需要用到iter和next的魔术方法。\n字典在Python中可以将key和value直接打印出来\n1.在使用字典循环的时候，如果直接使用print(i)的话他是循环出来的是key值，如果想要循环vlaue的的haul可以使用数组进行循环。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/effa018ba33c42a0ba7a06b4bdbae4e9.png",alt:""}}),t._v("\n2.但是字典在Python中有现成的包可以直接将key和value循环出来。可以使用items()方法来。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/dc1b11c0813b4cb6ad1fbb68336a802e.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"python的高阶函数1-匿名函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python的高阶函数1-匿名函数"}},[t._v("#")]),t._v(" "),a("a",{attrs:{name:"python1_256"}},[t._v(";")]),t._v("  Python的高阶函数1）匿名函数")]),t._v(" "),a("p",[t._v("使用lambda关键字修饰的简单函数")]),t._v(" "),a("p",[t._v("lambda x,y: x>y?x:y\n2）map(__func, __iter1)：使用__iter1迭代器执行__func函数—第一个参数传的是函数名，第二个参数传的是参数值。")]),t._v(" "),a("p",[t._v("3）reduce(__func, __iter1)：使用__iter1迭代器执行__func函数，将上一次计算的结果作为下一次计算的参数")]),t._v(" "),a("p",[t._v("4）filter(__function,__iterable)：用__function函数过滤，__iterable中的元素—过滤函数，满足的才会过滤，不满足的话会直接忽略；也就是说，filter必须能判断出返回的真假。")]),t._v(" "),a("p",[t._v("5）sorted(__iterable,key,reverse)：依据key的值排序__iterable中的元素，reverse决定是否逆序—可以加绝对值")]),t._v(" "),a("blockquote",[a("p",[t._v("filter和map的相似于不同：\n相似：filter和map一样也是接收一个函数和一个序列\n不同：filter把传入的函数一次作用在每个元素，然后根据返回的值是True还是False决定是留还是丢掉。")])]),t._v(" "),a("blockquote",[a("p",[t._v("查看的教程：\nhttp://c.biancheng.net/python/base/\nhttps://www.runoob.com/python/python-tutorial.html\nhttps://www.yiibai.com/python/python-constructors.html")])])])}),[],!1,null,null,null);a.default=e.exports}}]);