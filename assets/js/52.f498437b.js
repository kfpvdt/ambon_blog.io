(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{485:function(e,n,t){"use strict";t.r(n);var s=t(0),r=Object(s.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("硅谷甄选项目笔记")]),e._v(" "),n("p",[e._v("此次教学课程为硅谷甄选运营平台项目,包含运营平台项目模板从0到1开发，以及数据大屏幕、权限等业务。")]),e._v(" "),n("p",[e._v("此次教学课程涉及到技术栈包含***:vue3+TypeScript+vue-router+pinia+element-plus+axios+echarts***等技术栈。")])]),e._v(" "),n("p",[e._v("在vue框架中事件分为两种:一种是原生的DOM事件，另外一种自定义事件。原生DOM事件可以让用户与网页进行交互，比如click、dbclick、change、mouseenter、mouseleave…自定义事件可以实现子组件给父组件传递数据自定义事件可以实现子组件给父组件传递数据.在项目中是比较常用的。比如在父组件内部给子组件(Event2)绑定一个自定义事件在Event2子组件内部触发这个自定义事件")]),e._v(" "),n("h2",{attrs:{id:"一、vue3组件通信方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、vue3组件通信方式"}},[e._v("#")]),e._v(" 一、vue3组件通信方式")]),e._v(" "),n("p",[n("strong",[e._v("通信仓库地址:https://gitee.com/jch1011/vue3_communication.git")])]),e._v(" "),n("p",[e._v("不管是vue2还是vue3,组件通信方式很重要,不管是项目还是面试都是经常用到的知识点。")]),e._v(" "),n("p",[n("strong",[e._v("比如:vue2组件通信方式")])]),e._v(" "),n("h3",{attrs:{id:"props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" "),n("strong",[e._v("props:")])]),e._v(" "),n("p",[e._v("可以实现父子组件、子父组件、甚至兄弟组件通信")]),e._v(" "),n("h3",{attrs:{id:"自定义事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义事件"}},[e._v("#")]),e._v(" "),n("strong",[e._v("自定义事件")]),e._v(":")]),e._v(" "),n("p",[e._v("可以实现子父组件通信")]),e._v(" "),n("h3",{attrs:{id:"全局事件总线-bus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局事件总线-bus"}},[e._v("#")]),e._v(" "),n("strong",[e._v("全局事件总线$bus")]),e._v(":")]),e._v(" "),n("p",[e._v("可以实现任意组件通信")]),e._v(" "),n("h3",{attrs:{id:"pubsub"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pubsub"}},[e._v("#")]),e._v(" **pubsub:")]),e._v(" "),n("p",[e._v("**发布订阅模式实现任意组件通信")]),e._v(" "),n("h3",{attrs:{id:"vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[e._v("#")]),e._v(" "),n("strong",[e._v("vuex")]),e._v(":")]),e._v(" "),n("p",[e._v("集中式状态管理容器，实现任意组件通信")]),e._v(" "),n("h3",{attrs:{id:"ref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[e._v("#")]),e._v(" "),n("strong",[e._v("ref")]),e._v(":")]),e._v(" "),n("p",[e._v("父组件获取子组件实例VC,获取子组件的响应式数据以及方法")]),e._v(" "),n("h3",{attrs:{id:"slot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#slot"}},[e._v("#")]),e._v(" "),n("strong",[e._v("slot:")])]),e._v(" "),n("p",[e._v("插槽(默认插槽、具名插槽、作用域插槽)实现父子组件通信...")]),e._v(" "),n("p",[e._v("props可以实现父子组件通信,在vue3中我们可以通过defineProps获取父组件传递的数据。且在组件内部不需要引入defineProps方法可以直接使用！")]),e._v(" "),n("p",[n("strong",[e._v("父组件给子组件传递数据")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<child info="&#x6211;&#x7231;&#x7956;&#x56FD;" :money="money"></child>\n')])])]),n("h3",{attrs:{id:"子组件获取父组件传递数据-方式1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子组件获取父组件传递数据-方式1"}},[e._v("#")]),e._v(" "),n("strong",[e._v("子组件获取父组件传递数据:方式1")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let props = defineProps({\n  info:{\n   type:String,//&#x63A5;&#x53D7;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;\n   default:'&#x9ED8;&#x8BA4;&#x53C2;&#x6570;',//&#x63A5;&#x53D7;&#x9ED8;&#x8BA4;&#x6570;&#x636E;\n  },\n  money:{\n   type:Number,\n   default:0\n}})\n")])])]),n("h3",{attrs:{id:"子组件获取父组件传递数据-方式2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子组件获取父组件传递数据-方式2"}},[e._v("#")]),e._v(" "),n("strong",[e._v("子组件获取父组件传递数据:方式2")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let props = defineProps([\"info\",'money']);\n")])])]),n("p",[e._v("子组件获取到props数据就可以在模板中使用了,但是切记props是只读的(只能读取，不能修改)")]),e._v(" "),n("p",[e._v("在vue框架中事件分为两种:一种是原生的DOM事件，另外一种自定义事件。")]),e._v(" "),n("p",[e._v("原生DOM事件可以让用户与网页进行交互，比如click、dbclick、change、mouseenter、mouseleave...")]),e._v(" "),n("p",[e._v("自定义事件可以实现子组件给父组件传递数据")]),e._v(" "),n("p",[e._v("代码如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' <pre @click="handler">\n      &#x6211;&#x662F;&#x7956;&#x56FD;&#x7684;&#x8001;&#x82B1;&#x9AA8;&#x6735;\n </pre>\n')])])]),n("p",[e._v("当前代码级给pre标签绑定原生DOM事件点击事件,默认会给事件回调注入event事件对象。当然点击事件想注入多个参数可以按照下图操作。但是切记注入的事件对象务必叫做$event.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  <div @click="handler1(1,2,3,$event)">&#x6211;&#x8981;&#x4F20;&#x9012;&#x591A;&#x4E2A;&#x53C2;&#x6570;</div>\n')])])]),n("p",[e._v("在vue3框架click、dbclick、change(这类原生DOM事件),不管是在标签、自定义标签上(组件标签)都是原生DOM事件。")]),e._v(" "),n("p",[e._v("自定义事件可以实现子组件给父组件传递数据.在项目中是比较常用的。")]),e._v(" "),n("p",[e._v("比如在父组件内部给子组件(Event2)绑定一个自定义事件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<event2 @xxx="handler3"></event2>\n')])])]),n("p",[e._v("在Event2子组件内部触发这个自定义事件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div>\n    <h1>&#x6211;&#x662F;&#x5B50;&#x7EC4;&#x4EF6;2</h1>\n    <button @click="handler">&#x70B9;&#x51FB;&#x6211;&#x89E6;&#x53D1;xxx&#x81EA;&#x5B9A;&#x4E49;&#x4E8B;&#x4EF6;</button>\n  </div>\n</template>\n\n<script setup lang="ts">\nlet $emit = defineEmits(["xxx"]);\nconst handler = () => {\n  $emit("xxx", "法拉利", "茅台");\n};\n<\/script>\n<style scoped>\n</style>\n')])])]),n("p",[e._v("我们会发现在script标签内部,使用了defineEmits方法，此方法是vue3提供的方法,不需要引入直接使用。defineEmits方法执行，传递一个数组，数组元素即为将来组件需要触发的自定义事件类型，此方执行会返回一个$emit方法用于触发自定义事件。")]),e._v(" "),n("p",[e._v("当点击按钮的时候，事件回调内部调用$emit方法去触发自定义事件,第一个参数为触发事件类型，第二个、三个、N个参数即为传递给父组件的数据。")]),e._v(" "),n("p",[e._v("需要注意的是:代码如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<event2 @xxx="handler3" @click="handler"></event2>\n')])])]),n("p",[e._v("正常说组件标签书写@click应该为原生DOM事件,但是如果子组件内部通过defineEmits定义就变为自定义事件了")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let $emit = defineEmits([\"xxx\",'click']);\n")])])]),n("p",[e._v("全局事件总线可以实现任意组件通信，在vue2中可以根据VM与VC关系推出全局事件总线。")]),e._v(" "),n("p",[e._v("但是在vue3中没有Vue构造函数，也就没有Vue.prototype.以及组合式API写法没有this，")]),e._v(" "),n("p",[e._v("那么在Vue3想实现全局事件的总线功能就有点不现实啦，如果想在Vue3中使用全局事件总线功能")]),e._v(" "),n("p",[e._v("可以使用插件mitt实现。")]),e._v(" "),n("p",[n("strong",[e._v("mitt:官网地址:https://www.npmjs.com/package/mitt")])]),e._v(" "),n("p",[e._v("v-model指令可是收集表单数据(数据双向绑定)，除此之外它也可以实现父子组件数据同步。")]),e._v(" "),n("p",[e._v("而v-model实指利用props[modelValue]与自定义事件[update:modelValue]实现的。")]),e._v(" "),n("p",[e._v("下方代码:相当于给组件Child传递一个props(modelValue)与绑定一个自定义事件update:modelValue")]),e._v(" "),n("p",[e._v("实现父子组件数据同步")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<child v-model="msg"></child>\n')])])]),n("p",[e._v("在vue3中一个组件可以通过使用多个v-model,让父子组件多个数据同步,下方代码相当于给组件Child传递两个props分别是pageNo与pageSize，以及绑定两个自定义事件update:pageNo与update:pageSize实现父子数据同步")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<child v-model:pageno="msg" v-model:pagesize="msg1"></child>\n')])])]),n("p",[e._v("在Vue3中可以利用useAttrs方法获取组件的属性与事件(包含:原生DOM事件或者自定义事件),次函数功能类似于Vue2框架中a t t r s 属性与 attrs属性与a tt rs 属性与listeners方法。")]),e._v(" "),n("p",[e._v("比如:在父组件内部使用一个子组件my-button")]),e._v(" "),n("p",[e._v("子组件内部可以通过useAttrs方法获取组件属性与事件.因此你也发现了，它类似于props,可以接受父组件传递过来的属性与属性值。需要注意如果defineProps接受了某一个属性，useAttrs方法返回的对象身上就没有相应属性与属性值。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<script setup lang=\"ts\">\nimport {useAttrs} from 'vue';\nlet $attrs = useAttrs();\n<\/script>\n")])])]),n("p",[e._v("ref,提及到ref可能会想到它可以获取元素的DOM或者获取子组件实例的VC。既然可以在父组件内部通过ref获取子组件实例VC，那么子组件内部的方法与响应式数据父组件可以使用的。")]),e._v(" "),n("p",[e._v("比如:在父组件挂载完毕获取组件实例")]),e._v(" "),n("p",[e._v("父组件内部代码:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div>\n    <h1>ref&#x4E0E;$parent</h1>\n    <son ref="son"></son>\n  </div>\n</template>\n<script setup lang="ts">\nimport Son from "./Son.vue";\nimport { onMounted, ref } from "vue";\nconst son = ref();\nonMounted(() => {\n  console.log(son.value);\n});\n<\/script>\n')])])]),n("p",[e._v('但是需要注意，如果想让父组件获取子组件的数据或者方法需要通过defineExpose对外暴露,因为vue3中组件内部的数据对外"关闭的"，外部不能访问')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script setup lang="ts">\nimport { ref } from "vue";\n//数据\nlet money = ref(1000);\n//方法\nconst handler = ()=>{\n}\ndefineExpose({\n  money,\n   handler\n})\n<\/script>\n')])])]),n("p",[e._v("$parent可以获取某一个组件的父组件实例VC,因此可以使用父组件内部的数据与方法。必须子组件内部拥有一个按钮点击时候获取父组件实例，当然父组件的数据与方法需要通过defineExpose方法对外暴露")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<button @click="handler($parent)">&#x70B9;&#x51FB;&#x6211;&#x83B7;&#x53D6;&#x7236;&#x7EC4;&#x4EF6;&#x5B9E;&#x4F8B;</button>\n')])])]),n("p",[n("strong",[e._v("provide[提供]")])]),e._v(" "),n("p",[n("strong",[e._v("inject[注入]")])]),e._v(" "),n("p",[e._v("vue3提供两个方法provide与inject,可以实现隔辈组件传递参数")]),e._v(" "),n("p",[e._v("组件组件提供数据:")]),e._v(" "),n("p",[e._v("provide方法用于提供数据，此方法执需要传递两个参数,分别提供数据的key与提供数据value")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<script setup lang=\"ts\">\nimport {provide} from 'vue'\nprovide('token','admin_token');\n<\/script>\n")])])]),n("p",[e._v("后代组件可以通过inject方法获取数据,通过key获取存储的数值")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<script setup lang=\"ts\">\nimport {inject} from 'vue'\nlet token = inject('token');\n<\/script>\n")])])]),n("p",[n("strong",[e._v("pinia官网:https://pinia.web3doc.top/")])]),e._v(" "),n("p",[e._v("pinia也是集中式管理状态容器,类似于vuex。但是核心概念没有mutation、modules,使用方式参照官网")]),e._v(" "),n("p",[e._v("插槽：默认插槽、具名插槽、作用域插槽可以实现父子组件通信.")]),e._v(" "),n("p",[n("strong",[e._v("默认插槽:")])]),e._v(" "),n("p",[e._v("在子组件内部的模板中书写slot全局组件标签")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n\n</template>\n<script setup lang="ts">\n<\/script>\n<style scoped>\n</style>\n')])])]),n("p",[e._v("在父组件内部提供结构：Todo即为子组件,在父组件内部使用的时候，在双标签内部书写结构传递给子组件")]),e._v(" "),n("p",[e._v("注意开发项目的时候默认插槽一般只有一个")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<todo>\n  <h1>&#x6211;&#x662F;&#x9ED8;&#x8BA4;&#x63D2;&#x69FD;&#x586B;&#x5145;&#x7684;&#x7ED3;&#x6784;</h1>\n</todo>\n")])])]),n("p",[n("strong",[e._v("具名插槽：")])]),e._v(" "),n("p",[e._v("顾名思义，此插槽带有名字在组件内部留多个指定名字的插槽。")]),e._v(" "),n("p",[e._v("下面是一个子组件内部,模板中留两个插槽")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div>\n    <h1>todo</h1>\n    <slot name="a"></slot>\n    <slot name="b"></slot>\n  </div>\n</template>\n<script setup lang="ts">\n<\/script>\n\n<style scoped>\n</style>\n')])])]),n("p",[e._v("父组件内部向指定的具名插槽传递结构。需要注意v-slot：可以替换为#")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div>\n    <h1>slot</h1>\n    <todo>\n      <template v-slot:a>  //&#x53EF;&#x4EE5;&#x7528;#a&#x66FF;&#x6362;\n        <div>&#x586B;&#x5165;&#x7EC4;&#x4EF6;A&#x90E8;&#x5206;&#x7684;&#x7ED3;&#x6784;</div>\n      </template>\n      <template v-slot:b>//&#x53EF;&#x4EE5;&#x7528;#b&#x66FF;&#x6362;\n        <div>&#x586B;&#x5165;&#x7EC4;&#x4EF6;B&#x90E8;&#x5206;&#x7684;&#x7ED3;&#x6784;</div>\n      </template>\n    </todo>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport Todo from "./Todo.vue";\n<\/script>\n<style scoped>\n</style>\n')])])]),n("p",[n("strong",[e._v("作用域插槽")])]),e._v(" "),n("p",[e._v("作用域插槽：可以理解为，子组件数据由父组件提供，但是子组件内部决定不了自身结构与外观(样式)")]),e._v(" "),n("p",[e._v("子组件Todo代码如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n  <div>\n    <h1>todo</h1>\n\n  </div>\n</template>\n<script setup lang=\"ts\">\ndefineProps(['todos']);//接受父组件传递过来的数据\n<\/script>\n<style scoped>\n</style>\n")])])]),n("p",[e._v("父组件内部代码如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div>\n    <h1>slot</h1>\n    <todo :todos="todos">\n      <template v-slot="{$row,$index}">\n         \x3c!--父组件决定子组件的结构与外观--\x3e\n         <span :style="{color:$row.done?\'green\':\'red\'}">{{$row.title}}</span>\n      </template>\n    </todo>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport Todo from "./Todo.vue";\nimport { ref } from "vue";\n//父组件内部数据\nlet todos = ref([\n  { id: 1, title: "吃饭", done: true },\n  { id: 2, title: "睡觉", done: false },\n  { id: 3, title: "打豆豆", done: true },\n]);\n<\/script>\n<style scoped>\n</style>\n')])])]),n("h2",{attrs:{id:"二、搭建后台管理系统模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、搭建后台管理系统模板"}},[e._v("#")]),e._v(" 二、搭建后台管理系统模板")]),e._v(" "),n("p",[e._v("今天来带大家从0开始搭建一个vue3版本的后台管理系统。一个项目要有统一的规范，需要使用eslint+stylelint+prettier来对我们的代码质量做检测和修复，需要使用husky来做commit拦截，需要使用commitlint来统一提交规范，需要使用preinstall来统一包管理工具。")]),e._v(" "),n("p",[e._v("下面我们就用这一套规范来初始化我们的项目，集成一个规范的模版。")]),e._v(" "),n("ul",[n("li",[e._v("node v16.14.2")]),e._v(" "),n("li",[e._v("pnpm 8.0.0")])]),e._v(" "),n("p",[n("strong",[e._v('pnpm:performant npm ，意味"高性能的 npm"。'),n("a",{attrs:{href:"https://so.csdn.net/so/search?q=pnpm&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[e._v("pnpm"),n("OutboundLink")],1),e._v(' 由npm/yarn衍生而来，解决了npm/yarn内部潜在的bug，极大的优化了性能，扩展了使用场景。被誉为"最先进的包管理工具"')])]),e._v(" "),n("p",[e._v("pnpm安装指令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i -g pnpm\n")])])]),n("p",[e._v("项目初始化命令:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pnpm create vite\n")])])]),n("p",[e._v("进入到项目根目录pnpm install安装全部依赖.安装完依赖运行程序:pnpm run dev")]),e._v(" "),n("p",[e._v("运行完毕项目跑在http://127.0.0.1:5173/,可以访问你得项目啦")]),e._v(" "),n("p",[n("strong",[e._v("eslint中文官网:http://eslint.cn/")])]),e._v(" "),n("p",[e._v("首先安装eslint")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pnpm i eslint -D\n")])])]),n("p",[e._v("生成配置文件:.eslint.cjs")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npx eslint --init\n")])])]),n("p",[n("strong",[e._v(".eslint.cjs配置文件")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('module.exports = {\n   //&#x8FD0;&#x884C;&#x73AF;&#x5883;\n    "env": {\n        "browser": true,//&#x6D4F;&#x89C8;&#x5668;&#x7AEF;\n        "es2021": true,//es2021\n    },\n    //&#x89C4;&#x5219;&#x7EE7;&#x627F;\n    "extends": [\n       //&#x5168;&#x90E8;&#x89C4;&#x5219;&#x9ED8;&#x8BA4;&#x662F;&#x5173;&#x95ED;&#x7684;,&#x8FD9;&#x4E2A;&#x914D;&#x7F6E;&#x9879;&#x5F00;&#x542F;&#x63A8;&#x8350;&#x89C4;&#x5219;,&#x63A8;&#x8350;&#x89C4;&#x5219;&#x53C2;&#x7167;&#x6587;&#x6863;\n       //&#x6BD4;&#x5982;:&#x51FD;&#x6570;&#x4E0D;&#x80FD;&#x91CD;&#x540D;&#x3001;&#x5BF9;&#x8C61;&#x4E0D;&#x80FD;&#x51FA;&#x73B0;&#x91CD;&#x590D;key\n        "eslint:recommended",\n        //vue3&#x8BED;&#x6CD5;&#x89C4;&#x5219;\n        "plugin:vue/vue3-essential",\n        //ts&#x8BED;&#x6CD5;&#x89C4;&#x5219;\n        "plugin:@typescript-eslint/recommended"\n    ],\n    //&#x8981;&#x4E3A;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#x7684;&#x6587;&#x4EF6;&#x6307;&#x5B9A;&#x5904;&#x7406;&#x5668;\n    "overrides": [\n    ],\n    //&#x6307;&#x5B9A;&#x89E3;&#x6790;&#x5668;:&#x89E3;&#x6790;&#x5668;\n    //Esprima &#x9ED8;&#x8BA4;&#x89E3;&#x6790;&#x5668;\n    //Babel-ESLint babel&#x89E3;&#x6790;&#x5668;\n    //@typescript-eslint/parser ts&#x89E3;&#x6790;&#x5668;\n    "parser": "@typescript-eslint/parser",\n    //&#x6307;&#x5B9A;&#x89E3;&#x6790;&#x5668;&#x9009;&#x9879;\n    "parserOptions": {\n        "ecmaVersion": "latest",//&#x6821;&#x9A8C;ECMA&#x6700;&#x65B0;&#x7248;&#x672C;\n        "sourceType": "module"//&#x8BBE;&#x7F6E;&#x4E3A;"script"&#xFF08;&#x9ED8;&#x8BA4;&#xFF09;&#xFF0C;&#x6216;&#x8005;"module"&#x4EE3;&#x7801;&#x5728;ECMAScript&#x6A21;&#x5757;&#x4E2D;\n    },\n    //ESLint&#x652F;&#x6301;&#x4F7F;&#x7528;&#x7B2C;&#x4E09;&#x65B9;&#x63D2;&#x4EF6;&#x3002;&#x5728;&#x4F7F;&#x7528;&#x63D2;&#x4EF6;&#x4E4B;&#x524D;&#xFF0C;&#x60A8;&#x5FC5;&#x987B;&#x4F7F;&#x7528;npm&#x5B89;&#x88C5;&#x5B83;\n    //&#x8BE5;eslint-plugin-&#x524D;&#x7F00;&#x53EF;&#x4EE5;&#x4ECE;&#x63D2;&#x4EF6;&#x540D;&#x79F0;&#x88AB;&#x7701;&#x7565;\n    "plugins": [\n        "vue",\n        "@typescript-eslint"\n    ],\n    //eslint&#x89C4;&#x5219;\n    "rules": {\n    }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('# &#x8BA9;&#x6240;&#x6709;&#x4E0E;prettier&#x89C4;&#x5219;&#x5B58;&#x5728;&#x51B2;&#x7A81;&#x7684;Eslint rules&#x5931;&#x6548;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;prettier&#x8FDB;&#x884C;&#x4EE3;&#x7801;&#x68C0;&#x67E5;\n"eslint-config-prettier": "^8.6.0",\n"eslint-plugin-import": "^2.27.5",\n"eslint-plugin-node": "^11.1.0",\n# &#x8FD0;&#x884C;&#x66F4;&#x6F02;&#x4EAE;&#x7684;Eslint&#xFF0C;&#x4F7F;prettier&#x89C4;&#x5219;&#x4F18;&#x5148;&#x7EA7;&#x66F4;&#x9AD8;&#xFF0C;Eslint&#x4F18;&#x5148;&#x7EA7;&#x4F4E;\n"eslint-plugin-prettier": "^4.2.1",\n# vue.js&#x7684;Eslint&#x63D2;&#x4EF6;&#xFF08;&#x67E5;&#x627E;vue&#x8BED;&#x6CD5;&#x9519;&#x8BEF;&#xFF0C;&#x53D1;&#x73B0;&#x9519;&#x8BEF;&#x6307;&#x4EE4;&#xFF0C;&#x67E5;&#x627E;&#x8FDD;&#x89C4;&#x98CE;&#x683C;&#x6307;&#x5357;\n"eslint-plugin-vue": "^9.9.0",\n# &#x8BE5;&#x89E3;&#x6790;&#x5668;&#x5141;&#x8BB8;&#x4F7F;&#x7528;Eslint&#x6821;&#x9A8C;&#x6240;&#x6709;babel code\n"@babel/eslint-parser": "^7.19.1",\n')])])]),n("p",[e._v("安装指令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pnpm install -D eslint-plugin-import eslint-plugin-vue eslint-plugin-node eslint-plugin-prettier eslint-config-prettier eslint-plugin-node @babel/eslint-parser\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// @see https://eslint.bootcss.com/docs/rules/\n\nmodule.exports = {\n  env: {\n    browser: true,\n    es2021: true,\n    node: true,\n    jest: true,\n  },\n  /* &#x6307;&#x5B9A;&#x5982;&#x4F55;&#x89E3;&#x6790;&#x8BED;&#x6CD5; */\n  parser: 'vue-eslint-parser',\n  /** &#x4F18;&#x5148;&#x7EA7;&#x4F4E;&#x4E8E; parse &#x7684;&#x8BED;&#x6CD5;&#x89E3;&#x6790;&#x914D;&#x7F6E; */\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    parser: '@typescript-eslint/parser',\n    jsxPragma: 'React',\n    ecmaFeatures: {\n      jsx: true,\n    },\n  },\n  /* &#x7EE7;&#x627F;&#x5DF2;&#x6709;&#x7684;&#x89C4;&#x5219; */\n  extends: [\n    'eslint:recommended',\n    'plugin:vue/vue3-essential',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:prettier/recommended',\n  ],\n  plugins: ['vue', '@typescript-eslint'],\n  /*\n   * \"off\" &#x6216; 0    ==>  &#x5173;&#x95ED;&#x89C4;&#x5219;\n   * \"warn\" &#x6216; 1   ==>  &#x6253;&#x5F00;&#x7684;&#x89C4;&#x5219;&#x4F5C;&#x4E3A;&#x8B66;&#x544A;&#xFF08;&#x4E0D;&#x5F71;&#x54CD;&#x4EE3;&#x7801;&#x6267;&#x884C;&#xFF09;\n   * \"error\" &#x6216; 2  ==>  &#x89C4;&#x5219;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#xFF08;&#x4EE3;&#x7801;&#x4E0D;&#x80FD;&#x6267;&#x884C;&#xFF0C;&#x754C;&#x9762;&#x62A5;&#x9519;&#xFF09;\n   */\n  rules: {\n    // eslint&#xFF08;https://eslint.bootcss.com/docs/rules/&#xFF09;\n    'no-var': 'error', // &#x8981;&#x6C42;&#x4F7F;&#x7528; let &#x6216; const &#x800C;&#x4E0D;&#x662F; var\n    'no-multiple-empty-lines': ['warn', { max: 1 }], // &#x4E0D;&#x5141;&#x8BB8;&#x591A;&#x4E2A;&#x7A7A;&#x884C;\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-unexpected-multiline': 'error', // &#x7981;&#x6B62;&#x7A7A;&#x4F59;&#x7684;&#x591A;&#x884C;\n    'no-useless-escape': 'off', // &#x7981;&#x6B62;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x8F6C;&#x4E49;&#x5B57;&#x7B26;\n\n    // typeScript (https://typescript-eslint.io/rules)\n    '@typescript-eslint/no-unused-vars': 'error', // &#x7981;&#x6B62;&#x5B9A;&#x4E49;&#x672A;&#x4F7F;&#x7528;&#x7684;&#x53D8;&#x91CF;\n    '@typescript-eslint/prefer-ts-expect-error': 'error', // &#x7981;&#x6B62;&#x4F7F;&#x7528; @ts-ignore\n    '@typescript-eslint/no-explicit-any': 'off', // &#x7981;&#x6B62;&#x4F7F;&#x7528; any &#x7C7B;&#x578B;\n    '@typescript-eslint/no-non-null-assertion': 'off',\n    '@typescript-eslint/no-namespace': 'off', // &#x7981;&#x6B62;&#x4F7F;&#x7528;&#x81EA;&#x5B9A;&#x4E49; TypeScript &#x6A21;&#x5757;&#x548C;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x3002;\n    '@typescript-eslint/semi': 'off',\n\n    // eslint-plugin-vue (https://eslint.vuejs.org/rules/)\n    'vue/multi-word-component-names': 'off', // &#x8981;&#x6C42;&#x7EC4;&#x4EF6;&#x540D;&#x79F0;&#x59CB;&#x7EC8;&#x4E3A; &#x201C;-&#x201D; &#x94FE;&#x63A5;&#x7684;&#x5355;&#x8BCD;\n    'vue/script-setup-uses-vars': 'error', // &#x9632;&#x6B62;<script setup>使用的变量<template>被标记为未使用\n    'vue/no-mutating-props': 'off', // 不允许组件 prop的改变\n    'vue/attribute-hyphenation': 'off', // 对模板中的自定义组件强制执行属性命名样式\n  },\n}\n\n</code></pre><pre><code>dist\nnode_modules\n</code></pre><p>package.json新增两个运行脚本</p><pre><code>\"scripts\": {\n    \"lint\": \"eslint src\",\n    \"fix\": \"eslint src --fix\",\n}\n</code></pre><p>有了eslint，为什么还要有prettier？eslint针对的是javascript，他是一个检测工具，包含js语法以及少部分格式问题，在eslint看来，语法对了就能保证代码正常运行，格式问题属于其次；</p><p>而prettier属于格式化工具，它看不惯格式不统一，所以它就把eslint没干好的事接着干，另外，prettier支持</p><p>包含js在内的多种语言。</p><p>总结起来，<strong>eslint和prettier这俩兄弟一个保证js代码质量，一个保证代码美观。</strong></p><pre><code>pnpm install -D eslint-plugin-prettier prettier eslint-config-prettier\n</code></pre><pre><code>{\n  \"singleQuote\": true,\n  \"semi\": false,\n  \"bracketSpacing\": true,\n  \"htmlWhitespaceSensitivity\": \"ignore\",\n  \"endOfLine\": \"auto\",\n  \"trailingComma\": \"all\",\n  \"tabWidth\": 2\n}\n</code></pre><pre><code>/dist/*\n/html/*\n.local\n/node_modules/**\n**/*.svg\n**/*.sh\n/public/*\n</code></pre><p><strong>通过pnpm run lint去检测语法，如果出现不规范格式,通过pnpm run fix 修改\n\n")])])]),n("h2",{attrs:{id:"三、配置stylelint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、配置stylelint"}},[e._v("#")]),e._v(" 三、配置stylelint")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("stylelint为css的lint工具。可格式化css代码，检查css语法错误与不合理的写法，指定css书写顺序等。   \n我们的项目中使用scss作为预处理器，安装以下依赖：</p><pre><code>pnpm add sass sass-loader stylelint postcss postcss-scss postcss-html stylelint-config-prettier stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-standard stylelint-config-standard-vue stylelint-scss stylelint-order stylelint-config-standard-scss -D\n</code></pre><p><strong>官网:https://stylelint.bootcss.com/</strong></p><pre><code>// @see https://stylelint.bootcss.com/\n\nmodule.exports = {\n  extends: [\n    'stylelint-config-standard', // 配置stylelint拓展插件\n    'stylelint-config-html/vue', // 配置 vue 中 template 样式格式化\n    'stylelint-config-standard-scss', // 配置stylelint scss插件\n    'stylelint-config-recommended-vue/scss', // 配置 vue 中 scss 样式格式化\n    'stylelint-config-recess-order', // 配置stylelint css属性书写顺序插件,\n    'stylelint-config-prettier', // 配置stylelint和prettier兼容\n  ],\n  overrides: [\n    {\n      files: ['**/*.(scss|css|vue|html)'],\n      customSyntax: 'postcss-scss',\n    },\n    {\n      files: ['**/*.(html|vue)'],\n      customSyntax: 'postcss-html',\n    },\n  ],\n  ignoreFiles: [\n    '**/*.js',\n    '**/*.jsx',\n    '**/*.tsx',\n    '**/*.ts',\n    '**/*.json',\n    '**/*.md',\n    '**/*.yaml',\n  ],\n  /**\n   * null  => 关闭该规则\n   * always => 必须\n   */\n  rules: {\n    'value-keyword-case': null, // 在 css 中使用 v-bind，不报错\n    'no-descending-specificity': null, // 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器\n    'function-url-quotes': 'always', // 要求或禁止 URL 的引号 \"always(必须加上引号)\"|\"never(没有引号)\"\n    'no-empty-source': null, // 关闭禁止空源码\n    'selector-class-pattern': null, // 关闭强制选择器类名的格式\n    'property-no-unknown': null, // 禁止未知的属性(true 为不允许)\n    'block-opening-brace-space-before': 'always', //大括号之前必须有一个空格或不能有空白符\n    'value-no-vendor-prefix': null, // 关闭 属性值前缀 --webkit-box\n    'property-no-vendor-prefix': null, // 关闭 属性前缀 -webkit-mask\n    'selector-pseudo-class-no-unknown': [\n      // 不允许未知的选择器\n      true,\n      {\n        ignorePseudoClasses: ['global', 'v-deep', 'deep'], // 忽略属性，修改element默认样式的时候能使用到\n      },\n    ],\n  },\n}\n</code></pre><pre><code>/node_modules/*\n/dist/*\n/html/*\n/public/*\n</code></pre><p>最后配置统一的prettier来格式化我们的js和css，html代码</p><pre><code> \"scripts\": {\n    \"dev\": \"vite --open\",\n    \"build\": \"vue-tsc && vite build\",\n    \"preview\": \"vite preview\",\n    \"lint\": \"eslint src\",\n    \"fix\": \"eslint src --fix\",\n    \"format\": \"prettier --write \\\"./**/*.{html,vue,ts,js,json,md}\\\"\",\n    \"lint:eslint\": \"eslint src/**/*.{ts,vue} --cache --fix\",\n    \"lint:style\": \"stylelint src/**/*.{css,scss,vue} --cache --fix\"\n  },\n</code></pre><p><strong>当我们运行<code>pnpm run format</code>的时候，会把代码直接格式化</strong></p><p>在上面我们已经集成好了我们代码校验工具，但是需要每次手动的去执行命令才会格式化我们的代码。如果有人没有格式化就提交了远程仓库中，那这个规范就没什么用。所以我们需要强制让开发人员按照代码规范来提交。</p><p>安装<code>husky</code></p><pre><code>pnpm install -D husky\n</code></pre><pre><code>npx husky-init\n</code></pre><p>会在根目录下生成个一个.husky目录，在这个目录下面会有一个pre-commit文件，这个文件里面的命令在我们执行commit的时候就会执行</p><p>在<code>.husky/pre-commit</code>文件添加如下命令：</p><pre><code>#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\npnpm run format\n</code></pre><p>当我们对代码进行commit操作的时候，就会执行命令，对代码进行格式化，然后再提交。</p><p>对于我们的commit信息，也是有统一规范的，不能随便写,要让每个人都按照统一的标准来执行，我们可以利用<strong>commitlint</strong>来实现。</p><p>安装包</p><pre><code>pnpm add @commitlint/config-conventional @commitlint/cli -D\n</code></pre><p>添加配置文件，新建<code>commitlint.config.cjs</code>(注意是cjs)，然后添加下面的代码：</p><pre><code>module.exports = {\n  extends: ['@commitlint/config-conventional'],\n  // 校验规则\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat',\n        'fix',\n        'docs',\n        'style',\n        'refactor',\n        'perf',\n        'test',\n        'chore',\n        'revert',\n        'build',\n      ],\n    ],\n    'type-case': [0],\n    'type-empty': [0],\n    'scope-empty': [0],\n    'scope-case': [0],\n    'subject-full-stop': [0, 'never'],\n    'subject-case': [0, 'never'],\n    'header-max-length': [0, 'always', 72],\n  },\n}\n</code></pre><p>在<code>package.json</code>中配置scripts命令</p><pre><code># 在scrips中添加下面的代码\n{\n\"scripts\": {\n    \"commitlint\": \"commitlint --config commitlint.config.cjs -e -V\"\n  },\n}\n</code></pre><p>配置结束，现在当我们填写<code>commit</code>信息的时候，前面就需要带着下面的<code>subject</code></p><pre><code>'feat',//新特性、新功能\n'fix',//修改bug\n'docs',//文档修改\n'style',//代码格式修改, 注意不是 css 修改\n'refactor',//代码重构\n'perf',//优化相关，比如提升性能、体验\n'test',//测试用例修改\n'chore',//其他修改, 比如改变构建流程、或者增加依赖库、工具等\n'revert',//回滚到上一个版本\n'build',//编译相关的修改，例如发布版本、对项目构建或者依赖的改动\n</code></pre><p>配置husky</p><pre><code>npx husky add .husky/commit-msg\n</code></pre><p>在生成的commit-msg文件中添加下面的命令</p><pre><code>#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\npnpm commitlint\n</code></pre><p>当我们 commit 提交信息时，就不能再随意写了，必须是 git commit -m 'fix: xxx' 符合类型的才可以，<strong>需要注意的是类型的后面需要用英文的 :，并且冒号后面是需要空一格的，这个是不能省略的</strong></p><p>团队开发项目的时候，需要统一包管理器工具,因为不同包管理器工具下载同一个依赖,可能版本不一样,</p><p>导致项目出现bug问题,因此包管理器工具需要统一管理！！！</p><p>在根目录创建<code>scritps/preinstall.js</code>文件，添加下面的内容</p><pre><code>if (!/pnpm/.test(process.env.npm_execpath || '')) {\n  console.warn(\n    `\\u001b[33mThis repository must using pnpm as the package manager ` +\n    ` for scripts to work properly.\\u001b[39m\\n`,\n  )\n  process.exit(1)\n}\n</code></pre><p>配置命令</p><pre><code>\"scripts\": {\n\t\"preinstall\": \"node ./scripts/preinstall.js\"\n}\n</code></pre><h2>三、项目集成</h2><p>硅谷甄选运营平台,UI组件库采用的element-plus，因此需要集成element-plus插件！！！</p><p>官网地址:https://element-plus.gitee.io/zh-CN/</p><pre><code>pnpm install element-plus @element-plus/icons-vue\n</code></pre><p><strong>入口文件main.ts全局安装element-plus,element-plus默认支持语言英语设置为中文</strong></p><pre><code>import ElementPlus from 'element-plus';\nimport 'element-plus/dist/index.css'\n//@ts-ignore忽略当前文件ts类型的检测否则有红色提示(打包会失败)\nimport zhCn from 'element-plus/dist/locale/zh-cn.mjs'\napp.use(ElementPlus, {\n    locale: zhCn\n})\n</code></pre><p><strong>Element Plus全局组件类型声明</strong></p><pre><code>// tsconfig.json\n{\n  \"compilerOptions\": {\n    // ...\n\n    \"types\": [\"element-plus/global\"]\n  }\n}\n</code></pre><p>配置完毕可以测试element-plus组件与图标的使用.</p><p>在开发项目的时候文件与文件关系可能很复杂，因此我们需要给src文件夹配置一个别名！！！</p><pre><code>// vite.config.ts\nimport {defineConfig} from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport path from 'path'\nexport default defineConfig({\n    plugins: [vue()],\n    resolve: {\n        alias: {\n            \"@\": path.resolve(\"./src\") // 相对路径别名配置，使用 @ 代替 src\n        }\n    }\n})\n</code></pre><p><strong>TypeScript 编译配置</strong></p><pre><code>// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\", // 解析非相对模块的基地址，默认是当前目录\n    \"paths\": { //路径映射，相对于baseUrl\n      \"@/*\": [\"src/*\"]\n    }\n  }\n}\n</code></pre><p><strong>项目开发过程中，至少会经历开发环境、测试环境和生产环境(即正式环境)三个阶段。不同阶段请求的状态(如接口地址等)不尽相同，若手动切换接口地址是相当繁琐且易出错的。于是环境变量配置的需求就应运而生，我们只需做简单的配置，把环境状态切换的工作交给代码。</strong></p><p>开发环境（development）<br>顾名思义，开发使用的环境，每位开发人员在自己的dev分支上干活，开发到一定程度，同事会合并代码，进行联调。</p><p>测试环境（testing）<br>测试同事干活的环境啦，一般会由测试同事自己来部署，然后在此环境进行测试</p><p>生产环境（production）<br>生产环境是指正式提供对外服务的，一般会关掉错误报告，打开错误日志。(正式提供给客户使用的环境。)</p><p>注意:一般情况下，一个环境对应一台服务器,也有的公司开发与测试环境是一台服务器！！！</p><p>项目根目录分别添加 开发、生产和测试环境的文件!</p><pre><code>.env.development\n.env.production\n.env.test\n</code></pre><p>文件内容</p><pre><code># 变量必须以 VITE_ 为前缀才能暴露给外部读取\nNODE_ENV = 'development'\nVITE_APP_TITLE = '硅谷甄选运营平台'\nVITE_APP_BASE_API = '/dev-api'\n</code></pre><pre><code>NODE_ENV = 'production'\nVITE_APP_TITLE = '硅谷甄选运营平台'\nVITE_APP_BASE_API = '/prod-api'\n</code></pre><pre><code># 变量必须以 VITE_ 为前缀才能暴露给外部读取\nNODE_ENV = 'test'\nVITE_APP_TITLE = '硅谷甄选运营平台'\nVITE_APP_BASE_API = '/test-api'\n</code></pre><p>配置运行命令：package.json</p><pre><code> \"scripts\": {\n    \"dev\": \"vite --open\",\n    \"build:test\": \"vue-tsc && vite build --mode test\",\n    \"build:pro\": \"vue-tsc && vite build --mode production\",\n    \"preview\": \"vite preview\"\n  },\n</code></pre><p>通过import.meta.env获取环境变量</p><p>在开发项目的时候经常会用到svg矢量图,而且我们使用SVG以后，页面上加载的不再是图片资源,</p><p>这对页面性能来说是个很大的提升，而且我们SVG文件比img要小的很多，放在项目中几乎不占用资源。</p><p><strong>安装SVG依赖插件</strong></p><pre><code>pnpm install vite-plugin-svg-icons -D\n</code></pre><p><strong>在<code>vite.config.ts</code>中配置插件</strong></p><pre><code>import { createSvgIconsPlugin } from 'vite-plugin-svg-icons'\nimport path from 'path'\nexport default () => {\n  return {\n    plugins: [\n      createSvgIconsPlugin({\n        // Specify the icon folder to be cached\n        iconDirs: [path.resolve(process.cwd(), 'src/assets/icons')],\n        // Specify symbolId format\n        symbolId: 'icon-[dir]-[name]',\n      }),\n    ],\n  }\n}\n</code></pre><p><strong>入口文件导入</strong></p><pre><code>import 'virtual:svg-icons-register'\n</code></pre><p>因为项目很多模块需要使用图标,因此把它封装为全局组件！！！</p><p><strong>在src/components目录下创建一个SvgIcon组件:代表如下</strong></p><pre><code><template>\n  <div>\n    <svg :style=\"{ width: width, height: height }\">\n      <use :xlink:href=\"prefix + name\" :fill=\"color\"></use>\n    </svg>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ndefineProps({\n  //xlink:href属性值的前缀\n  prefix: {\n    type: String,\n    default: '#icon-'\n  },\n  //svg矢量图的名字\n  name: String,\n  //svg图标的颜色\n  color: {\n    type: String,\n    default: \"\"\n  },\n  //svg宽度\n  width: {\n    type: String,\n    default: '16px'\n  },\n  //svg高度\n  height: {\n    type: String,\n    default: '16px'\n  }\n\n})\n<\/script>\n<style scoped></style>\n")])])]),n("p",[e._v("在src文件夹目录下创建一个index.ts文件：用于注册components文件夹内部全部全局组件！！！")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import SvgIcon from './SvgIcon/index.vue';\nimport type { App, Component } from 'vue';\nconst components: { [name: string]: Component } = { SvgIcon };\nexport default {\n    install(app: App) {\n        Object.keys(components).forEach((key: string) => {\n            app.component(key, components[key]);\n        })\n    }\n}\n")])])]),n("p",[e._v("在入口文件引入src/index.ts文件,通过app.use方法安装自定义插件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import gloablComponent from './components/index';\napp.use(gloablComponent);\n")])])]),n("p",[e._v('我们目前在组件内部已经可以使用scss样式,因为在配置styleLint工具的时候，项目当中已经安装过sass sass-loader,因此我们再组件内可以使用scss语法！！！需要加上lang="scss"')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<style scoped lang="scss"></style>\n')])])]),n("p",[e._v("接下来我们为项目添加一些全局的样式")]),e._v(" "),n("p",[e._v("在src/styles目录下创建一个index.scss文件，当然项目中需要用到清除默认样式，因此在index.scss引入reset.scss")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@import reset.scss\n")])])]),n("p",[e._v("在入口文件引入")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import '@/styles'\n")])])]),n("p",[e._v("但是你会发现在src/styles/index.scss全局样式文件中没有办法使用变量 . 因此需要给项目中引入全局变量 变量.因此需要给项目中引入全局变量变量.因此需要给项目中引入全局变量.")]),e._v(" "),n("p",[e._v("在style/variable.scss创建一个variable.scss文件！")]),e._v(" "),n("p",[e._v("在vite.config.ts文件配置如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default defineConfig((config) => {\n\tcss: {\n      preprocessorOptions: {\n        scss: {\n          javascriptEnabled: true,\n          additionalData: '@import \"./src/styles/variable.scss\";',\n        },\n      },\n    },\n\t}\n}\n")])])]),n("p",[n("strong",[n("code",[e._v('@import "./src/styles/variable.less";')]),e._v(" 后面的 "),n("code",[e._v(";")]),e._v(" 不要忘记，不然会报错")]),e._v("!")]),e._v(" "),n("p",[e._v("配置完毕你会发现scss提供这些全局变量可以在组件样式中使用了！！！")]),e._v(" "),n("p",[e._v("安装依赖:https://www.npmjs.com/package/vite-plugin-mock")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pnpm install -D vite-plugin-mock mockjs\n")])])]),n("p",[e._v("在 vite.config.js 配置文件启用插件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { UserConfigExport, ConfigEnv } from 'vite'\nimport { viteMockServe } from 'vite-plugin-mock'\nimport vue from '@vitejs/plugin-vue'\nexport default ({ command })=> {\n  return {\n    plugins: [\n      vue(),\n      viteMockServe({\n        localEnabled: command === 'serve',\n      }),\n    ],\n  }\n}\n")])])]),n("p",[e._v("在根目录创建mock文件夹:去创建我们需要mock数据与接口！！！")]),e._v(" "),n("p",[e._v("在mock文件夹内部创建一个user.ts文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//&#x7528;&#x6237;&#x4FE1;&#x606F;&#x6570;&#x636E;\nfunction createUserList() {\n    return [\n        {\n            userId: 1,\n            avatar:\n                'https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif',\n            username: 'admin',\n            password: '111111',\n            desc: '&#x5E73;&#x53F0;&#x7BA1;&#x7406;&#x5458;',\n            roles: ['&#x5E73;&#x53F0;&#x7BA1;&#x7406;&#x5458;'],\n            buttons: ['cuser.detail'],\n            routes: ['home'],\n            token: 'Admin Token',\n        },\n        {\n            userId: 2,\n            avatar:\n                'https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif',\n            username: 'system',\n            password: '111111',\n            desc: '&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;&#x5458;',\n            roles: ['&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;&#x5458;'],\n            buttons: ['cuser.detail', 'cuser.user'],\n            routes: ['home'],\n            token: 'System Token',\n        },\n    ]\n}\n\nexport default [\n    // &#x7528;&#x6237;&#x767B;&#x5F55;&#x63A5;&#x53E3;\n    {\n        url: '/api/user/login',//&#x8BF7;&#x6C42;&#x5730;&#x5740;\n        method: 'post',//&#x8BF7;&#x6C42;&#x65B9;&#x5F0F;\n        response: ({ body }) => {\n            //&#x83B7;&#x53D6;&#x8BF7;&#x6C42;&#x4F53;&#x643A;&#x5E26;&#x8FC7;&#x6765;&#x7684;&#x7528;&#x6237;&#x540D;&#x4E0E;&#x5BC6;&#x7801;\n            const { username, password } = body;\n            //&#x8C03;&#x7528;&#x83B7;&#x53D6;&#x7528;&#x6237;&#x4FE1;&#x606F;&#x51FD;&#x6570;,&#x7528;&#x4E8E;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6709;&#x6B64;&#x7528;&#x6237;\n            const checkUser = createUserList().find(\n                (item) => item.username === username && item.password === password,\n            )\n            //&#x6CA1;&#x6709;&#x7528;&#x6237;&#x8FD4;&#x56DE;&#x5931;&#x8D25;&#x4FE1;&#x606F;\n            if (!checkUser) {\n                return { code: 201, data: { message: '&#x8D26;&#x53F7;&#x6216;&#x8005;&#x5BC6;&#x7801;&#x4E0D;&#x6B63;&#x786E;' } }\n            }\n            //&#x5982;&#x679C;&#x6709;&#x8FD4;&#x56DE;&#x6210;&#x529F;&#x4FE1;&#x606F;\n            const { token } = checkUser\n            return { code: 200, data: { token } }\n        },\n    },\n    // &#x83B7;&#x53D6;&#x7528;&#x6237;&#x4FE1;&#x606F;\n    {\n        url: '/api/user/info',\n        method: 'get',\n        response: (request) => {\n            //&#x83B7;&#x53D6;&#x8BF7;&#x6C42;&#x5934;&#x643A;&#x5E26;token\n            const token = request.headers.token;\n            //&#x67E5;&#x770B;&#x7528;&#x6237;&#x4FE1;&#x606F;&#x662F;&#x5426;&#x5305;&#x542B;&#x6709;&#x6B21;token&#x7528;&#x6237;\n            const checkUser = createUserList().find((item) => item.token === token)\n            //&#x6CA1;&#x6709;&#x8FD4;&#x56DE;&#x5931;&#x8D25;&#x7684;&#x4FE1;&#x606F;\n            if (!checkUser) {\n                return { code: 201, data: { message: '&#x83B7;&#x53D6;&#x7528;&#x6237;&#x4FE1;&#x606F;&#x5931;&#x8D25;' } }\n            }\n            //&#x5982;&#x679C;&#x6709;&#x8FD4;&#x56DE;&#x6210;&#x529F;&#x4FE1;&#x606F;\n            return { code: 200, data: {checkUser} }\n        },\n    },\n]\n")])])]),n("p",[n("strong",[e._v("安装axios")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pnpm install axios\n")])])]),n("p",[e._v("最后通过axios测试接口！！！")]),e._v(" "),n("p",[e._v("在开发项目的时候避免不了与后端进行交互,因此我们需要使用axios插件实现发送网络请求。在开发项目的时候")]),e._v(" "),n("p",[e._v("我们经常会把axios进行二次封装。")]),e._v(" "),n("p",[e._v("目的:")]),e._v(" "),n("p",[e._v("1:使用请求拦截器，可以在请求拦截器中处理一些业务(开始进度条、请求头携带公共参数)")]),e._v(" "),n("p",[e._v("2:使用响应拦截器，可以在响应拦截器中处理一些业务(进度条结束、简化服务器返回的数据、处理http网络错误)")]),e._v(" "),n("p",[e._v("在根目录下创建utils/request.ts")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import axios from "axios";\nimport { ElMessage } from "element-plus";\n//&#x521B;&#x5EFA;axios&#x5B9E;&#x4F8B;\nlet request = axios.create({\n    baseURL: import.meta.env.VITE_APP_BASE_API,\n    timeout: 5000\n})\n//&#x8BF7;&#x6C42;&#x62E6;&#x622A;&#x5668;\nrequest.interceptors.request.use(config => {\n    return config;\n});\n//&#x54CD;&#x5E94;&#x62E6;&#x622A;&#x5668;\nrequest.interceptors.response.use((response) => {\n    return response.data;\n}, (error) => {\n    //&#x5904;&#x7406;&#x7F51;&#x7EDC;&#x9519;&#x8BEF;\n    let msg = \'\';\n    let status = error.response.status;\n    switch (status) {\n        case 401:\n            msg = "token&#x8FC7;&#x671F;";\n            break;\n        case 403:\n            msg = \'&#x65E0;&#x6743;&#x8BBF;&#x95EE;\';\n            break;\n        case 404:\n            msg = "&#x8BF7;&#x6C42;&#x5730;&#x5740;&#x9519;&#x8BEF;";\n            break;\n        case 500:\n            msg = "&#x670D;&#x52A1;&#x5668;&#x51FA;&#x73B0;&#x95EE;&#x9898;";\n            break;\n        default:\n            msg = "&#x65E0;&#x7F51;&#x7EDC;";\n\n    }\n    ElMessage({\n        type: \'error\',\n        message: msg\n    })\n    return Promise.reject(error);\n});\nexport default request;\n')])])]),n("p",[e._v("在开发项目的时候,接口可能很多需要统一管理。在src目录下去创建api文件夹去统一管理项目的接口；")]),e._v(" "),n("p",[e._v("比如:下面方式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//&#x7EDF;&#x4E00;&#x7BA1;&#x7406;&#x54B1;&#x4EEC;&#x9879;&#x76EE;&#x7528;&#x6237;&#x76F8;&#x5173;&#x7684;&#x63A5;&#x53E3;\n\nimport request from '@/utils/request'\n\nimport type {\n\n loginFormData,\n\n loginResponseData,\n\n userInfoReponseData,\n\n} from './type'\n\n//&#x9879;&#x76EE;&#x7528;&#x6237;&#x76F8;&#x5173;&#x7684;&#x8BF7;&#x6C42;&#x5730;&#x5740;\n\nenum API {\n\n LOGIN_URL = '/admin/acl/index/login',\n\n USERINFO_URL = '/admin/acl/index/info',\n\n LOGOUT_URL = '/admin/acl/index/logout',\n\n}\n//&#x767B;&#x5F55;&#x63A5;&#x53E3;\nexport const reqLogin = (data: loginFormData) =>\n request.post<any, loginresponsedata>(API.LOGIN_URL, data)\n//&#x83B7;&#x53D6;&#x7528;&#x6237;&#x4FE1;&#x606F;\n\nexport const reqUserInfo = () =>\n\n request.get<any, userinforeponsedata>(API.USERINFO_URL)\n\n//&#x9000;&#x51FA;&#x767B;&#x5F55;\n\nexport const reqLogout = () => request.post<any, any>(API.LOGOUT_URL)\n</any,></any,></any,>\n")])])]),n("h2",{attrs:{id:"四、项目的资源地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、项目的资源地址"}},[e._v("#")]),e._v(" 四、项目的资源地址")]),e._v(" "),n("p",[e._v("贾成豪老师代码仓库地址:https://gitee.com/jch1011/vue3_admin_template-bj1.git")]),e._v(" "),n("p",[e._v("项目在线文档:")]),e._v(" "),n("p",[e._v("服务器域名:http://sph-api.atguigu.cn")]),e._v(" "),n("p",[e._v("swagger文档:")]),e._v(" "),n("p",[e._v("http://139.198.104.58:8209/swagger-ui.html")]),e._v(" "),n("p",[e._v("http://139.198.104.58:8212/swagger-ui.html#/")]),e._v(" "),n("p",[e._v("echarts:国内镜像网站")]),e._v(" "),n("p",[e._v("https://www.isqqw.com/echarts-doc/zh/option.html#title")]),e._v(" "),n("p",[e._v("http://datav.aliyun.com/portal/school/atlas/area_selector")])])}),[],!1,null,null,null);n.default=r.exports}}]);